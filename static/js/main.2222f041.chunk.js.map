{"version":3,"sources":["theme.tsx","utils/api/common/client.ts","utils/api/documentation.ts","hooks/useGetDocumentationList.ts","pages/SwaggerUIPage.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/swagger-icon.png"],"names":["theme","breakpoints","xs","sm","md","lg","xl","transitions","basic","palette","primary","secondary","background","error","mainGrey","supportingGrey","lightGrey","lightPlaceholder","darkPlaceholder","divider","white","black","grey","purple","normalText","hoverOverlay","footerBackground","headerDivider","updateAppLogoBackground","imagePlaceholderBackground","client","axios","create","timeout","paramsSerializer","params","qs","stringify","arrayFormat","getDocListPath","process","REACT_APP_CONTENT_URL","useGetDocumentationList","useState","isLoading","setIsLoading","apiDocList","setApiDocList","useCallback","a","async","apiClient","get","data","console","log","Sider","Layout","Content","MenuItem","Menu","Item","StyledLayout","styled","StyledMenu","StyledSider","StyledContent","publicRoutes","path","component","getApiDocList","useLocation","search","pathname","activeUrl","parse","ignoreQueryPrefix","url","useEffect","width","src","swaggerIcon","alt","selectedKeys","map","label","key","onClick","domEvent","preventDefault","to","exact","render","App","route","index","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.2222f041.chunk.js","sourcesContent":["const theme = {\n  breakpoints: {\n    xs: 0,\n    sm: 576,\n    md: 768,\n    lg: 992,\n    xl: 1200,\n  },\n\n  transitions: {\n    basic: 'all 0.3s, padding 0s',\n  },\n\n  palette: {\n    primary: '#ff9f00',\n    secondary: '#0033e7',\n\n    background: '#ffffff',\n    error: '#ff495c',\n\n    mainGrey: '#1a1e28',\n    supportingGrey: '#7f7f7f',\n    lightGrey: '#b2b2b2',\n\n    lightPlaceholder: '#ffffff7f',\n    darkPlaceholder: '#0000004d',\n\n    divider: '#00000026',\n\n    white: '#ffffff',\n    black: '#000000',\n    grey: '#f2f2f2',\n    purple: '#450056',\n\n    normalText: '#262626',\n\n    hoverOverlay: '#00000026',\n\n    footerBackground: '#4a4a4a',\n    headerDivider: '#00000033',\n\n    updateAppLogoBackground: '#f5f6fa',\n    imagePlaceholderBackground: '#f2f2f2',\n  },\n}\n\nexport default theme\n","import axios from 'axios'\nimport qs from 'qs'\n\nconst client = axios.create({\n  timeout: 10000,\n  paramsSerializer: params => qs.stringify(params, { arrayFormat: 'brackets' }),\n})\n\nexport default client\n","import { apiClient } from './common'\n\nconst getDocListPath =\n  process.env.REACT_APP_CONTENT_URL ||\n  'https://firebasestorage.googleapis.com/v0/b/openapi-ui.appspot.com/o/content.json?alt=media'\n\nexport const getDocumentationList = () => apiClient.get(getDocListPath)\n","import { useCallback, useState } from 'react'\n\nimport { getDocumentationList } from 'src/utils/api/documentation'\n\ntype Documentation = {\n  label: string\n  url: string\n}\n\ntype UseGetDocumentationListResponse = [\n  { isLoading: boolean; apiDocList: Documentation[] },\n  () => void\n]\n\nconst useGetDocumentationList = (): UseGetDocumentationListResponse => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [apiDocList, setApiDocList] = useState<Documentation[]>([])\n\n  const getApiDocList = useCallback(async () => {\n    setIsLoading(true)\n    try {\n      const { data } = await getDocumentationList()\n      setApiDocList(data)\n    } catch (error) {\n      console.log(error)\n    }\n    setIsLoading(false)\n  }, [])\n\n  return [{ isLoading, apiDocList }, getApiDocList]\n}\n\nexport default useGetDocumentationList\n","import 'swagger-ui-react/swagger-ui.css'\n\nimport { Layout, Menu } from 'antd'\nimport qs from 'qs'\nimport React, { useEffect } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\nimport SwaggerUI from 'swagger-ui-react'\n\nimport swaggerIcon from 'src/assets/swagger-icon.png'\nimport useGetDocumentationList from 'src/hooks/useGetDocumentationList'\n\nconst { Sider, Content } = Layout\nconst { Item: MenuItem } = Menu\n\nconst StyledLayout = styled(Layout)`\n  height: 100vh;\n`\n\nconst StyledMenu = styled(Menu)`\n  overflow-y: auto;\n  background-color: #000;\n  border-right: 0;\n`\n\nconst StyledSider = styled(Sider)`\n  height: 100%;\n  background-color: #000;\n`\n\nconst StyledContent = styled(Content)`\n  overflow: auto;\n`\n\nconst App: React.FC = () => {\n  const [{ apiDocList }, getApiDocList] = useGetDocumentationList()\n  const { search, pathname } = useLocation()\n  const { url: activeUrl } = qs.parse(search, { ignoreQueryPrefix: true })\n\n  useEffect(getApiDocList, [])\n\n  console.log(apiDocList)\n\n  return (\n    <StyledLayout>\n      <StyledSider>\n        <img width=\"100%\" src={swaggerIcon} alt=\"\" />\n        <StyledMenu selectedKeys={[activeUrl as string]}>\n          {apiDocList.map(({ label, url }) => (\n            <MenuItem\n              key={url}\n              onClick={({ domEvent }) => domEvent.preventDefault()}\n            >\n              <Link to={`${pathname}?${qs.stringify({ url })}`}>{label}</Link>\n            </MenuItem>\n          ))}\n        </StyledMenu>\n      </StyledSider>\n      <StyledContent>\n        <SwaggerUI url={activeUrl as string} />\n      </StyledContent>\n    </StyledLayout>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { Redirect, RouteProps } from 'react-router'\n\nimport SwaggerUIPage from './pages/SwaggerUIPage'\n\nconst publicRoutes: RouteProps[] = [\n  {\n    path: '/swagger/ui',\n    component: SwaggerUIPage,\n    exact: true,\n  },\n  {\n    path: '*',\n    render: () => <Redirect to=\"/swagger/ui\" />,\n  },\n]\n\nexport { publicRoutes }\n","import './App.less'\n\nimport React from 'react'\nimport { Route, Switch } from 'react-router'\nimport { ThemeProvider } from 'styled-components'\n\nimport theme from 'src/theme'\n\nimport { publicRoutes } from './routes'\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Switch>\n        {publicRoutes.map((route, index) => (\n          <Route key={index} {...route} />\n        ))}\n      </Switch>\n    </ThemeProvider>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { createBrowserHistory } from 'history'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router } from 'react-router-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst history = createBrowserHistory()\n\n// export const store = getStore(history)\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/swagger-icon.dd28d3d8.png\";"],"sourceRoot":""}